@use "sass:map";
@use "../variables/colour";
@use "../tools/media";

@function brand-colour($colour, $opacity: 1) {
  @return colour.brand-colour($colour, $opacity);
}

@mixin colour-css-vars() {
  @each $name, $value in colour.$colour-palette-default {
    --#{$name}: #{$value};
  }
}

@mixin colour-css-vars-dark() {
  @each $name, $value in colour.$colour-palette-dark {
    --#{$name}: #{$value};
  }
}

@mixin colour-css-vars-high-contrast() {
  @each $name, $value in colour.$colour-palette-high-contrast {
    --#{$name}: #{$value};
  }
}

@mixin colour-css-vars-high-contrast-dark() {
  @each $name, $value in colour.$colour-palette-high-contrast-dark {
    --#{$name}: #{$value};
  }
}

@mixin accent-css-vars($colour) {
  @if $colour == "yellow" {
    --accent: #{brand-colour("yellow")};
    --accent-background: #{brand-colour("yellow")};
    --accent-background-light: #{brand-colour("cream")};
    --accent-font-base: #{brand-colour("black")};
    --accent-font-dark: #{brand-colour("black")};
    --accent-font-light: #{brand-colour("black", 0.7)};
    --accent-icon-light: #{brand-colour("black", 0.45)};
    --accent-link: #{brand-colour("black")};
    --accent-link-visited: #{brand-colour("black")};
    --accent-keyline: #{brand-colour("black", 0.5)};
    --accent-keyline-dark: #{brand-colour("black", 0.8)};
    --button-accent-background: #{brand-colour("yellow")};
  } @else {
    --accent-font-base: #{brand-colour("white")};
    --accent-font-dark: #{brand-colour("white")};
    --accent-font-light: #{brand-colour("white", 0.7)};
    --accent-icon-light: #{brand-colour("white", 0.45)};
    --accent-link: #{brand-colour("white")};
    --accent-link-visited: #{brand-colour("white")};
    --accent-keyline: #{brand-colour("white", 0.5)};
    --accent-keyline-dark: #{brand-colour("white", 0.8)};

    @if $colour == "black" {
      // --accent: #{brand-colour("light-grey")};
      // --accent-background: #{brand-colour("black")};
      // --accent-background-light: #{brand-colour("light-grey")};
      // --button-accent-text: #{brand-colour("black")};
      // --button-accent-background: #{brand-colour("grey")};
    } @else {
      --button-accent-text: #{brand-colour("white")};
      @if $colour == "pink" {
        --accent: #{brand-colour("pink")};
        --accent-background: #{brand-colour("maroon")};
        --accent-background-light: #{brand-colour("pastel-pink")};
        --button-accent-background: #{brand-colour("maroon")};
      } @else if $colour == "orange" {
        --accent: #{brand-colour("orange")};
        --accent-background: #{brand-colour("chestnut")};
        --accent-background-light: #{brand-colour("pastel-orange")};
        --button-accent-background: #{brand-colour("chestnut")};
      } @else if $colour == "green" {
        --accent: #{brand-colour("green")};
        --accent-background: #{brand-colour("forest")};
        --accent-background-light: #{brand-colour("pastel-green")};
        --button-accent-background: #{brand-colour("forest")};
      } @else if $colour == "blue" {
        --accent: #{brand-colour("blue")};
        --accent-background: #{brand-colour("navy")};
        --accent-background-light: #{brand-colour("pastel-blue")};
        --button-accent-background: #{brand-colour("navy")};
      }
    }
  }
}

@mixin colour-font(
  $colour,
  $important: false,
  $default-palette: colour.$colour-palette-default
) {
  color: map.get($default-palette, $colour) if($important, !important, null);
  color: var(--#{$colour}) if($important, !important, null);
}

@mixin colour-background($colour, $important: false) {
  background-color: map.get(colour.$colour-palette-default, $colour)
    if($important, !important, null);
  background-color: var(--#{$colour}) if($important, !important, null);
}

@mixin colour-border(
  $colour,
  $width: "",
  $style: solid,
  $direction: "",
  $important: false
) {
  @if $direction != "" {
    @if $width != "" {
      $property: border-#{$direction};
      border-#{$direction}: $width
        map.get(colour.$colour-palette-default, $colour)
        $style
        if($important, !important, null);
      border-#{$direction}: $width
        var(--#{$colour})
        $style
        if($important, !important, null);
    } @else {
      border-#{$direction}-color: map.get(
          colour.$colour-palette-default,
          $colour
        )
        if($important, !important, null);
      border-#{$direction}-color: var(--#{$colour})
        if($important, !important, null);
    }
  } @else {
    @if $width != "" {
      border: $width
        map.get(colour.$colour-palette-default, $colour)
        $style
        if($important, !important, null);
      border: $width var(--#{$colour}) $style if($important, !important, null);
    } @else {
      border-color: map.get(colour.$colour-palette-default, $colour)
        if($important, !important, null);
      border-color: var(--#{$colour}) if($important, !important, null);
    }
  }
}

@mixin colour-outline($colour, $width: "", $style: solid, $important: false) {
  @if $width != "" {
    outline: $width
      map.get(colour.$colour-palette-default, $colour)
      $style
      if($important, !important, null);
    outline: $width var(--#{$colour}) $style if($important, !important, null);
  } @else {
    outline-color: map.get(colour.$colour-palette-default, $colour)
      if($important, !important, null);
    outline-color: var(--#{$colour}) if($important, !important, null);
  }
}

@mixin colour-fill($colour, $important: false) {
  fill: map.get(colour.$colour-palette-default, $colour)
    if($important, !important, null);
  fill: var(--#{$colour}) if($important, !important, null);
}

%plain {
  .tna-template--system-theme & {
    @include colour-css-vars;

    @media (prefers-color-scheme: dark) {
      @include colour-css-vars-dark;
    }

    @media (prefers-contrast: more) {
      @include colour-css-vars-high-contrast;
    }

    @media (prefers-contrast: more) and (prefers-color-scheme: dark) {
      @include colour-css-vars-high-contrast-dark;
    }
  }

  .tna-template--light-theme & {
    @include colour-css-vars;
  }

  .tna-template--dark-theme & {
    @include colour-css-vars-dark;
  }

  .tna-template--high-contrast-theme & {
    @include colour-css-vars-high-contrast;
  }

  .tna-template--high-contrast-theme.tna-template--dark-theme & {
    @include colour-css-vars-high-contrast-dark;
  }

  --background: var(--page-background);
}

@mixin plain {
  @extend %plain;
}

%contrast {
  --background: var(--contrast-background);
  --font-base: var(--contrast-font-base);
  --font-dark: var(--contrast-font-dark);
  --font-light: var(--contrast-font-light);
  --icon-light: var(--contrast-icon-light);
  --link: var(--contrast-link);
  --link-visited: var(--contrast-link-visited);
  --keyline: var(--contrast-keyline);
  --keyline-dark: var(--contrast-keyline-dark);
  --button-text: var(--contrast-button-text);
  --button-background: var(--contrast-button-background);
  --button-hover-text: var(--contrast-button-hover-text);
  --button-hover-background: var(--contrast-button-hover-background);

  @include colour-background("background");

  @include colour-font("font-base", false, colour.$colour-palette-dark);
}

@mixin contrast {
  @extend %contrast;
}

%contrast-on-mobile {
  @include media.on-mobile {
    --background: var(--contrast-background);
    --font-base: var(--contrast-font-base);
    --font-dark: var(--contrast-font-dark);
    --font-light: var(--contrast-font-light);
    --icon-light: var(--contrast-icon-light);
    --link: var(--contrast-link);
    --link-visited: var(--contrast-link-visited);
    --keyline: var(--contrast-keyline);
    --keyline-dark: var(--contrast-keyline-dark);
    --button-text: var(--contrast-button-text);
    --button-background: var(--contrast-button-background);
    --button-hover-text: var(--contrast-button-hover-text);
    --button-hover-background: var(--contrast-button-hover-background);

    @include colour-background("background");

    @include colour-font("font-base", false, colour.$colour-palette-dark);
  }
}

@mixin contrast-on-mobile {
  @extend %contrast-on-mobile;
}

%accent {
  --background: var(--accent-background);
  --font-base: var(--accent-font-base);
  --font-dark: var(--accent-font-dark);
  --font-light: var(--accent-font-light);
  --icon-light: var(--accent-icon-light);
  --link: var(--accent-link);
  --link-visited: var(--accent-link-visited);
  --keyline: var(--accent-keyline);
  --keyline-dark: var(--accent-keyline-dark);

  @include colour-background("background");

  @include colour-font("font-base", false, colour.$colour-palette-dark);
}

@mixin accent {
  @extend %accent;
}

%tint {
  @include colour-background("background-tint");
}

@mixin tint {
  @extend %tint;
}

%accent-background {
  @include colour-background("accent-background");
}

@mixin accent-background {
  @extend %accent-background;
}

%accent-light {
  --background: var(--accent-background-light);
  --font-base: #{map.get(colour.$colour-palette-default, "font-base")};
  --font-dark: #{map.get(colour.$colour-palette-default, "font-dark")};
  --font-light: #{map.get(colour.$colour-palette-default, "font-light")};
  --link: #{map.get(colour.$colour-palette-default, "font-dark")};
  --link-visited: #{map.get(colour.$colour-palette-default, "link-visited")};
  --keyline: #{map.get(colour.$colour-palette-default, "keyline")};
  --keyline-dark: #{map.get(colour.$colour-palette-default, "keyline-dark")};
  --button-text: #{map.get(colour.$colour-palette-default, "button-text")};
  --button-background: #{map.get(
      colour.$colour-palette-default,
      "button-background"
    )};
  --button-hover-text: #{map.get(
      colour.$colour-palette-default,
      "button-hover-text"
    )};
  --button-hover-background: #{map.get(
      colour.$colour-palette-default,
      "button-hover-background"
    )};

  @include colour-background("background");
}

@mixin accent-light {
  @extend %accent-light;
}

@mixin on-high-contrast {
  .tna-template--high-contrast-theme & {
    @content;
  }

  .tna-template--system-theme & {
    @media (prefers-contrast: more) {
      @content;
    }
  }
}
