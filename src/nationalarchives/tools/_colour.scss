@use "sass:map";
@use "../features";
@use "../variables/colour";
@use "../tools/media";

@function brand-colour($colour) {
  @return map.get(colour.$colour-palette-brand, $colour);
}

@mixin colour-css-vars() {
  @each $name, $value in colour.$colour-palette-default {
    --#{$name}: #{$value};
  }
}

@mixin colour-css-vars-dark() {
  @each $name, $value in colour.$colour-palette-dark {
    --#{$name}: #{$value};
  }
}

@mixin colour-css-vars-high-contrast() {
  @each $name, $value in colour.$colour-palette-high-contrast {
    --#{$name}: #{$value};
  }
}

@mixin colour-css-vars-high-contrast-dark() {
  @each $name, $value in colour.$colour-palette-high-contrast-dark {
    --#{$name}: #{$value};
  }
}
@mixin accent-css-vars($colour) {
  @if $colour == "yellow" {
    --accent: #{brand-colour("yellow")};
    --accent-background: #{brand-colour("yellow")};
    --accent-background-light: #{brand-colour("cream")};
    --accent-font-base: #{brand-colour("black")};
    --accent-font-dark: #{brand-colour("black")};
    --accent-font-light: #{rgba(brand-colour("black"), 0.7)};
    --accent-link: #{brand-colour("black")};
    --accent-link-visited: #b9f;
    --accent-keyline: #{rgba(brand-colour("black"), 0.5)};
    --accent-keyline-dark: #{rgba(brand-colour("black"), 0.8)};
  } @else {
    --accent-font-base: #{brand-colour("white")};
    --accent-font-dark: #{brand-colour("white")};
    --accent-font-light: #{rgba(brand-colour("white"), 0.7)};
    --accent-link: #{brand-colour("white")};
    --accent-link-visited: #b9f;
    --accent-keyline: #{rgba(brand-colour("white"), 0.5)};
    --accent-keyline-dark: #{rgba(brand-colour("white"), 0.8)};

    @if $colour == "black" {
      --accent: #{brand-colour("black")};
      --accent-background: #{brand-colour("black")};
      --accent-background-light: #{brand-colour("light-grey")};
    } @else if $colour == "pink" {
      --accent: #{brand-colour("pink")};
      --accent-background: #{brand-colour("maroon")};
      --accent-background-light: #{brand-colour("pastel-pink")};
    } @else if $colour == "orange" {
      --accent: #{brand-colour("orange")};
      --accent-background: #{brand-colour("chestnut")};
      --accent-background-light: #{brand-colour("pastel-orange")};
    } @else if $colour == "green" {
      --accent: #{brand-colour("green")};
      --accent-background: #{brand-colour("forest")};
      --accent-background-light: #{brand-colour("pastel-green")};
    } @else if $colour == "blue" {
      --accent: #{brand-colour("blue")};
      --accent-background: #{brand-colour("navy")};
      --accent-background-light: #{brand-colour("pastel-blue")};
    }
  }
}

@mixin colour-font($colour, $important: false) {
  color: map.get(colour.$colour-palette-default, $colour);
  color: var(--#{$colour}) if($important, !important, null);
}

@mixin colour-background($colour, $important: false) {
  background-color: map.get(colour.$colour-palette-default, $colour);
  @if $colour == "accent-background" or $colour == "accent-background-light" {
    background-color: var(--#{$colour}, var(--#{$colour}-default))
      if($important, !important, null);
  } @else {
    background-color: var(--#{$colour}) if($important, !important, null);
  }
}

@mixin colour-border(
  $colour,
  $width: "",
  $style: solid,
  $direction: "",
  $important: false
) {
  @if $direction != "" {
    @if $width != "" {
      $property: border-#{$direction};
      border-#{$direction}: $width
        map.get(colour.$colour-palette-default, $colour)
        $style
        if($important, !important, null);
      border-#{$direction}: $width
        var(--#{$colour})
        $style
        if($important, !important, null);
    } @else {
      border-#{$direction}-color: map.get(
          colour.$colour-palette-default,
          $colour
        )
        if($important, !important, null);
      border-#{$direction}-color: var(--#{$colour})
        if($important, !important, null);
    }
  } @else {
    @if $width != "" {
      border: $width
        map.get(colour.$colour-palette-default, $colour)
        $style
        if($important, !important, null);
      border: $width var(--#{$colour}) $style if($important, !important, null);
    } @else {
      border-color: map.get(colour.$colour-palette-default, $colour)
        if($important, !important, null);
      border-color: var(--#{$colour}) if($important, !important, null);
    }
  }
}

@mixin colour-outline($colour, $important: false) {
  outline-color: map.get(colour.$colour-palette-default, $colour)
    if($important, !important, null);
  outline-color: var(--#{$colour}) if($important, !important, null);
}

@mixin colour-fill($colour, $important: false) {
  fill: map.get(colour.$colour-palette-default, $colour)
    if($important, !important, null);
  fill: var(--#{$colour}) if($important, !important, null);
}

@mixin fixed {
  @include colour-css-vars;

  // @include colour-font("font-base");
}

%invert {
  --font-base: var(--contrast-font-base);
  --font-dark: var(--contrast-font-dark);
  --font-light: var(--contrast-font-light);
  --link: var(--contrast-link);
  --link-visited: var(--contrast-link-visited);
  --keyline: var(--contrast-keyline);
  --keyline-dark: var(--contrast-keyline-dark);

  @include colour-background("contrast-background");
}

@mixin invert {
  @extend %invert;
}

%invert-on-mobile {
  @include media.on-mobile {
    --font-base: var(--contrast-font-base);
    --font-dark: var(--contrast-font-dark);
    --font-light: var(--contrast-font-light);
    --link: var(--contrast-link);
    --link-visited: var(--contrast-link-visited);
    --keyline: var(--contrast-keyline);
    --keyline-dark: var(--contrast-keyline-dark);

    @include colour-background("contrast-background");
  }
}

@mixin invert-on-mobile {
  @extend %invert-on-mobile;
}

@mixin uninvert {
  @include colour-css-vars;

  .tna-template--system-theme & {
    @include colour-css-vars;

    @media (prefers-color-scheme: dark) {
      @include colour-css-vars-dark;
    }

    @media (prefers-contrast: more) {
      @include colour-css-vars-high-contrast;
    }

    @media (prefers-contrast: more) and (prefers-color-scheme: dark) {
      @include colour-css-vars-high-contrast-dark;
    }
  }

  .tna-template--light-theme & {
    @include colour-css-vars;
  }

  .tna-template--dark-theme & {
    @include colour-css-vars-dark;
  }

  .tna-template--high-contrast-theme & {
    @include colour-css-vars-high-contrast;
  }

  .tna-template--high-contrast-theme.tna-template--dark-theme & {
    @include colour-css-vars-high-contrast-dark;
  }
}

%accent {
  --font-base: var(--accent-font-base, var(--accent-font-base));
  --font-dark: var(--accent-font-dark, var(--accent-font-dark));
  --font-light: var(--accent-font-light, var(--accent-font-light));
  --link: var(--accent-link, var(--accent-link));
  --link-visited: var(--accent-link-visited, var(--accent-link-visited));
  --keyline: var(--accent-keyline, var(--accent-keyline));
  --keyline-dark: var(--accent-keyline-dark, var(--accent-keyline-dark));
  @include colour-background("accent-background");
}

@mixin accent {
  @extend %accent;
}

%accent-background {
  @include colour-background("accent-background");
}

@mixin accent-background {
  @extend %accent-background;
}

%light-accent-background {
  @include colour-background("accent-background-light");
}

@mixin light-accent-background {
  @extend %light-accent-background;
}

@mixin on-high-contrast {
  .tna-template--high-contrast-theme & {
    @content;
  }

  @media (prefers-contrast: more) {
    .tna-template--system-theme & {
      @content;
    }
  }
}
