@use "sass:math";
@use "../tools/colour";
@use "../tools/media";
@use "../tools/spacing";
@use "../tools/typography";
@use "../variables/assets";
@use "../variables/grid";
@use "../variables/typography" as typographyVars;

@import "https://use.typekit.net/hkj3kuz.css";

@font-face {
  font-family: "Open Sans";
  src: url("#{assets.$tna-font-path}/OpenSans-Medium.ttf");
  font-weight: normal;
  font-style: normal;
  // font-display: swap;
}

@font-face {
  font-family: "Open Sans";
  src: url("#{assets.$tna-font-path}/OpenSans-Bold.ttf");
  font-weight: bold;
  font-style: normal;
  // font-display: swap;
}

@font-face {
  font-family: "Roboto Mono";
  src: url("#{assets.$tna-font-path}/RobotoMono-Regular.ttf");
  font-weight: normal;
  font-style: normal;
  // font-display: swap;
}

.tna-template {
  @include colour.colour-font("font-base");
  @include typography.main-font;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: none;
  direction: ltr;
}

.tna-template__body {
  color: inherit;
  @include typography.relative-font-size(typographyVars.$body-font-size-px);
  line-height: typographyVars.$body-line-height;

  @include media.on-mobile {
    @include typography.relative-font-size(
      typographyVars.$body-font-size-px-mobile
    );
  }
}

h1,
h2,
h3,
h4,
h5,
h6,
ul,
ol {
  margin-top: 0;
}

h1,
h2,
h3,
h4,
h5,
h6,
strong {
  @include typography.main-font-weight-bold;
}

p {
  margin: 0 0 1rem;

  @include media.on-tiny {
    margin-bottom: 1rem;
  }

  &:last-child {
    margin-bottom: 0;
  }
}

a {
  @include colour.colour-font("link");
  text-decoration-thickness: 1.5px;

  &:visited {
    @include colour.colour-font("link-visited");
  }

  &:hover,
  &:active {
    @include typography.interacted-text-decoration;
  }

  &.tna-chip {
    text-decoration: none;

    &,
    &:link,
    &:visited {
      @include colour.colour-font("font-dark");
    }

    &:hover {
      @include typography.interacted-text-decoration;
    }
  }
}

small {
  @include typography.relative-font-size(
    typographyVars.$body-font-size-px * 0.85
  );
}

.tna-ul,
.tna-ol {
  margin-top: 0;
  margin-right: 0;
  margin-left: 0;
  padding: 0 0 0 2rem;

  @include spacing.space-below;

  li::marker {
    @include colour.colour-font("accent-background");
    font-weight: 700;
  }

  &--plain {
    padding-left: 0;

    list-style: none;
  }
}

.tna-dl {
  display: flex;
  flex-wrap: wrap;

  @include spacing.space-below;

  dt,
  dd {
    margin: 0;
    padding: 0.5rem 1rem;

    position: relative;

    box-sizing: border-box;

    word-wrap: break-word;
    // word-break: break-all;
  }

  &--plain {
    dt {
      padding-left: 0;
    }

    dd {
      padding-right: 0;
    }
  }

  dt {
    width: 25%;

    @include typography.main-font-weight-bold;
  }

  dd {
    width: 75%;

    + dd {
      margin-left: 25%;
    }
  }

  &--icon-padding {
    dt {
      padding-left: 3rem !important;

      position: relative;

      .fa-solid {
        overflow: visible;

        position: absolute;
        top: 50%;
        left: 1rem;

        @include colour.colour-font("icon-light");
        text-align: left;

        transform: translateY(-50%);
      }
    }
  }

  &--icon-padding#{&}--plain {
    dt {
      padding-left: 2rem !important;

      .fa-solid {
        left: 0;
      }
    }
  }

  &:not(&--plain) {
    dt,
    dd {
      // padding-left: 1rem;
      // padding-right: 1rem;
    }

    dt:first-child,
    dd:nth-of-type(2n) + dt,
    dd:nth-of-type(2n + 1) {
      @include colour.colour-background("background-tint");
    }
  }

  @include media.on-small {
    dt {
      width: 35%;
    }

    dd {
      width: 65%;

      + dd {
        margin-left: 35%;
      }
    }
  }

  @include media.on-tiny {
    dt,
    dd {
      width: 100%;
      margin-left: 0;
    }

    dd {
      padding-left: 1rem;
    }

    &--plain {
      dt {
        padding-bottom: 0;
      }

      dd {
        padding-top: 0;
        // padding-left: 2rem;

        + dt {
          // @include colour.colour-border("keyline", 1px, solid, top);
        }
      }
    }

    &:not(&--plain) {
      dt {
        @include colour.colour-background("background-tint");
      }

      dd {
        background: transparent !important;
      }
    }
  }

  @include colour.on-high-contrast {
    @include colour.colour-border("keyline-dark", 1px, solid, bottom);

    dt,
    dd {
      // padding-left: 0;
      // padding-right: 0;

      background: transparent !important;

      @include colour.colour-border("keyline-dark", 1px, solid, top);
    }
  }
}

%chip {
  max-width: max-content;
  padding: 0.125em 0.25rem;

  display: block;

  @include typography.detail-font-small;
  line-height: 1;

  @include colour.accent;

  @include colour.colour-border("accent-background", 0.125rem);
}

.tna-chip {
  @extend %chip;
}

.tna-chip-list {
  padding-left: 0;

  display: flex;
  flex-wrap: wrap;
  gap: 1rem;

  list-style: none;

  @include spacing.space-below;

  &__item {
  }
}

%heading {
  @include colour.colour-font("font-dark");

  text-wrap: balance;

  &:not(.tna-heading--no-link-arrow) {
    a {
      display: inline-block;

      &::after {
        padding-left: 0.25rem;

        display: inline-block;

        font-weight: 700;

        content: "\203A";
      }

      &:hover {
        &::after {
          padding-left: 0.5rem;
        }
      }
    }
  }
}

%heading-xl {
  @include typography.heading-font;
  @include typography.relative-font-size(64);
  line-height: 1.2;

  @include media.on-medium {
    @include typography.relative-font-size(42);
  }

  @include media.on-mobile {
    @include typography.relative-font-size(36);
  }
}

%heading-l {
  @include typography.heading-font;
  @include typography.relative-font-size(32);
  line-height: 1.3;

  @include media.on-medium {
    @include typography.relative-font-size(26);
  }

  @include media.on-mobile {
    @include typography.relative-font-size(24);
  }
}

%heading-m {
  @include typography.main-font-weight-bold;
  @include typography.relative-font-size(22);
  line-height: 1.6;
}

%heading-s {
  @include typography.main-font-weight-bold;
  @include typography.relative-font-size(18);
  line-height: 1.6;
}

.tna-heading {
  @extend %heading;

  &--xl {
    @extend %heading-xl;
  }

  &--l {
    @extend %heading-l;
  }

  &--m {
    @extend %heading-m;
  }

  &--s {
    @extend %heading-s;
  }
}

.tna-hgroup {
  &__supertitle {
    margin: 0 0 0.25rem;

    @extend %chip;
  }

  &__title {
    margin: 0;

    display: block;

    @extend %heading;
  }

  &--xl &__title {
    @extend %heading-xl;
  }

  &--l &__title {
    @extend %heading-l;
  }

  &--m &__title {
    @extend %heading-m;
  }

  &--s &__title {
    @extend %heading-s;
  }
}

.tna-heading,
.tna-hgroup {
  margin-top: 3rem;
  margin-bottom: 1rem;

  // &--m,
  // &--s {
  //   margin-bottom: 0.5rem;
  // }

  &:first-child {
    margin-top: 0;
  }

  &:last-child {
    margin-bottom: 0;
  }
}

.tna-blockquote {
  margin-top: 0;
  margin-right: 0;
  margin-left: 0;
  padding: 1rem 1rem 1rem 2rem;

  @include colour.colour-border("accent-background", 0.35rem, solid, left);

  @include spacing.space-below;

  &__quote {
    font-weight: 700;
  }

  &__author {
    font-style: italic;

    .tna-blockquote & {
      margin: 1rem 0 0;
    }

    &::before {
      content: "\2014" " ";
    }
  }
}

.tna-scene-setter {
  @include typography.detail-font;
  @include colour.colour-font("font-dark");
  @include typography.relative-font-size(30);
  line-height: math.div(50, 30);

  @include spacing.space-below;

  @include media.on-mobile {
    @include typography.relative-font-size(24);
    line-height: 2;
  }

  a {
    color: inherit;
    text-decoration-thickness: 2px;

    &:hover {
      text-decoration-thickness: 4.5px;
    }
  }
}

.tna-columns {
  column-gap: grid.$gutter-width;

  &--2 {
    column-count: 2;
  }

  &--3 {
    column-count: 3;
  }

  @include media.on-tiny {
    column-gap: grid.$gutter-width-tiny;
  }

  @include media.on-small {
    @for $i from 1 through 4 {
      &--#{$i}-small {
        column-count: $i;
      }
    }
  }

  @include media.on-tiny {
    @for $i from 1 through 4 {
      &--#{$i}-tiny {
        column-count: $i;
      }
    }
  }

  &__block {
    break-inside: avoid;
  }

  &:has(&__block:only-of-type) {
    column-count: 1;
  }
}
