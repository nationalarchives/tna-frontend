@use "sass:math";
@use "../tools/colour";
@use "../tools/media";
@use "../tools/typography";
@use "../variables/grid";

// TODO: Temporary - will eventually bundle font files into package
@import "https://fonts.googleapis.com/css2?family=Open+Sans:wght@500;700&family=Roboto+Mono:wght@400&display=swap";
@import "https://use.typekit.net/hkj3kuz.css";

.tna-template {
  @include colour.colour-font("font-base");
  @include typography.main-font;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: none;
  direction: ltr;
}

.tna-template__body {
  color: inherit;
  @include typography.relative-font-size(18);
  // line-height: 1.6;
  line-height: #{math.div(16, 18) * 2};
}

h1,
h2,
h3,
h4,
h5,
h6,
ul,
ol {
  margin-top: 0;
}

h1,
h2,
h3,
h4,
h5,
h6,
strong {
  @include typography.main-font-weight-bold;
}

p {
  margin: 0 0 1.5rem;

  &:last-child {
    margin-bottom: 0;
  }
}

a {
  @include colour.colour-font("link");
  text-decoration-thickness: 1.5px;

  &:visited {
    @include colour.colour-font("link-visited");
  }

  &:hover,
  &:active {
    @include typography.interacted-text-decoration;
  }
}

.tna-ul,
.tna-ol {
  margin: 0 0 2rem;
  padding: 0 0 0 2rem;

  &:last-child {
    margin-bottom: 0;
  }

  li::marker {
    @include colour.colour-font("accent");
    font-weight: 700;
  }

  &--plain {
    padding-left: 0;

    list-style: none;
  }
}

.tna-heading {
  margin-bottom: 1rem;

  @include colour.colour-font("font-dark");
  @include typography.heading-font;

  &:last-child {
    margin-bottom: 0;
  }

  &--xl {
    @include typography.relative-font-size(64);
    line-height: 1;

    @include media.on-medium {
      @include typography.relative-font-size(42);
    }

    @include media.on-mobile {
      @include typography.relative-font-size(36);
    }
  }

  &--l {
    @include typography.relative-font-size(32);
    line-height: 1.2;

    @include media.on-medium {
      @include typography.relative-font-size(26);
    }

    @include media.on-mobile {
      @include typography.relative-font-size(24);
    }
  }

  &--m {
    @include typography.relative-font-size(20);
    line-height: 1.4;
  }

  &--s {
    @include typography.relative-font-size(18);
    line-height: 1.6;
  }
}

.tna-hgroup {
  margin-bottom: 1rem;

  &:last-child {
    margin-bottom: 0;
  }

  &__supertitle {
    margin: 0 0 0.5rem;

    @include colour.colour-font("font-base");
    @include typography.detail-font;

    .tna-hgroup & {
      // margin: 0;
    }
  }

  &__title {
    margin: 0;

    @include colour.colour-font("font-dark");

    .tna-hgroup__supertitle {
      display: block;

      @include colour.colour-font("font-base");
    }
  }

  &--xl {
    .tna-hgroup__title {
      @include typography.relative-font-size(64);
      line-height: 1;
    }
  }

  &--l {
    .tna-hgroup__title {
      @include typography.relative-font-size(32);
      line-height: 1.2;
    }
  }

  &--m {
    .tna-hgroup__title {
      @include typography.relative-font-size(20);
      line-height: 1.4;
    }
  }

  &--s {
    .tna-hgroup__title {
      @include typography.relative-font-size(18);
      line-height: 1.6;
    }
  }
}

.tna-blockquote {
  margin: 0 0 2rem;
  padding: 1rem 1rem 1rem 2rem;

  @include colour.colour-border("keyline", 0.35rem, solid, left);

  // quotes: "“" "”" "‘" "’";

  &:last-child {
    margin-bottom: 0;
  }

  // &::before {
  //   float: left;

  //   content: open-quote;
  // }

  &__quote {
    font-weight: 700;
  }

  &__author {
    font-style: italic;

    .tna-blockquote & {
      margin: 1rem 0 0;
    }

    &::before {
      content: "\2014" " ";
    }
  }
}

.tna-columns {
  column-gap: grid.$gutter-width;

  &--2 {
    column-count: 2;
  }

  &--3 {
    column-count: 3;
  }

  @include media.on-mobile {
    column-gap: grid.$gutter-width-mobile;
  }

  @include media.on-small {
    @for $i from 1 through 4 {
      &--#{$i}-small {
        column-count: $i;
      }
    }
  }

  @include media.on-tiny {
    @for $i from 1 through 4 {
      &--#{$i}-tiny {
        column-count: $i;
      }
    }
  }

  &__block {
    break-inside: avoid;
  }

  &:has(&__block:only-of-type) {
    column-count: 1;
  }
}
